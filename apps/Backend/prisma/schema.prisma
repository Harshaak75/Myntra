generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model users {
  id            Int            @id @default(autoincrement())
  name          String?        @db.VarChar(100)
  email         String         @unique @db.VarChar(100)
  Order         Order[]
  refreshTokens refresh_token?
  userAddress   userAddress[]
  userProfile   userProfile?
  phoneNumber   PhoneNumber?
  Wishlist      Wishlist[]
  CartItem      CartItem[]
}

model userProfile {
  id                  Int      @id @default(autoincrement())
  userId              Int      @unique
  Gender              String
  alternateNumber     String?
  alternateNumberName String?
  dateofbirth         DateTime
  user                users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model userAddress {
  id            Int     @id @default(autoincrement())
  userId        Int
  name          String
  mobile        String
  pincode       String
  state         String
  address       String // House No, Street, Area
  locality      String // Locality / Town
  city          String // City / District
  typeOfAddress String  @default("home")
  isDefault     Boolean @default(false)
  user          users   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PhoneNumber {
  id          Int    @id @default(autoincrement())
  userId      Int    @unique
  countryCode String @default("+91")
  number      String
  user        users  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model refresh_token {
  id        Int      @id @default(autoincrement())
  token     String
  userId    Int      @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model otpTable {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  otp           String?
  expiresAt     DateTime?
  lastRequestAt DateTime?
}

model blacklist_token {
  id        Int      @id @default(autoincrement())
  token     String
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model admin_users {
  id                  Int                  @id @default(autoincrement())
  name                String
  email               String               @unique
  password            String
  role                String
  createdAt           DateTime             @default(now())
  is_active           Boolean              @default(true)
  last_login          DateTime?
  refresh_token_admin refresh_token_admin?
}

model refresh_token_admin {
  id        Int         @id @default(autoincrement())
  token     String
  adminId   Int         @unique
  createdAt DateTime    @default(now())
  expiresAt DateTime
  admin     admin_users @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model refresh_token_seller {
  id        Int      @id @default(autoincrement())
  token     String
  sellerId  Int      @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  seller    Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}

model Product {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(255)
  price            Decimal
  sellerId         Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  productSku       String?            @unique
  sellerSku        String?            @unique
  productType      String?
  lotId            String?            @db.VarChar(20)
  status           String?            @default("Pending")
  approved         Boolean            @default(false)
  isActive         Boolean            @default(true)
  Order            Order[]
  seller           Seller             @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  productAttribute productAttribute[]
  Wishlist         Wishlist[]
  CartItem         CartItem[]
}

model Seller {
  id                   Int                   @id @default(autoincrement())
  email                String                @unique @db.VarChar(100)
  password             String                @db.VarChar(255)
  phone                String                @db.VarChar(15)
  gstNumber            String?               @unique @db.VarChar(20)
  panNumber            String?               @unique @db.VarChar(20)
  city                 String?               @db.VarChar(100)
  state                String?               @db.VarChar(100)
  pincode              String?               @db.VarChar(10)
  country              String?               @default("India")
  bankDetails          Json?
  isVerified           Boolean               @default(false)
  isActive             Boolean               @default(true)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  firstname            String                @db.VarChar(255)
  lastname             String?               @db.VarChar(255)
  address1             String?
  address2             String?
  Order                Order[]
  products             Product[]
  SellerDocuments      SellerDocuments[]
  SellerShopDetails    SellerShopDetails[]
  refresh_token_seller refresh_token_seller?
  Picklist             Picklist[]
}

model SellerShopDetails {
  id        Int      @id @default(autoincrement())
  sellerId  Int
  shopName  String   @db.VarChar(255)
  address1  String
  address2  String
  pincode   String   @db.VarChar(15)
  city      String   @db.VarChar(20)
  category  String[]
  gstnumber String   @db.VarChar(30)
  pannumber String   @db.VarChar(15)
  seller    Seller   @relation(fields: [sellerId], references: [id])
}

model Order {
  id            Int      @id @default(autoincrement())
  productId     Int
  sellerId      Int
  buyerId       Int
  quantity      Int
  totalPrice    Decimal
  coverId       String?
  status        String   @default("Created")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  orderCode     String   @unique
  picklistId    Int?
  selectedSize  String? // ðŸ†• NEW FIELD
  selectedColor String? // ðŸ†• NEW FIELD

  buyerPatternLink String?

  buyer    users     @relation(fields: [buyerId], references: [id])
  picklist Picklist? @relation(fields: [picklistId], references: [id])
  product  Product   @relation(fields: [productId], references: [id])
  seller   Seller    @relation(fields: [sellerId], references: [id])
}

model Picklist {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  sellerId  Int
  status    String   @default("Pick Initiated") // âœ… Add this
  createdAt DateTime @default(now())
  orders    Order[]
  seller    Seller   @relation(fields: [sellerId], references: [id])
}

model SellerDocuments {
  id          Int      @id @default(autoincrement())
  sellerId    Int
  documentUrl String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  seller      Seller   @relation(fields: [sellerId], references: [id])
}

model productAttribute {
  id             Int     @id @default(autoincrement())
  productId      Int
  attributename  String
  attributevalue String
  product        Product @relation(fields: [productId], references: [id])
}

// seller Packet Id

model SellerPacket {
  id           Int                 @id @default(autoincrement())
  code         String              @unique
  picklistId   Int
  picklistCode String // ðŸ‘ˆ Added: for easier barcode scanning / frontend work
  createdAt    DateTime            @default(now())
  status       String              @default("Packing") // Packing / QC / Packed / Failed
  orders       SellerPacketOrder[] // One-to-many relation

  // Optional fields
  createdBy Int? // If you track which seller/staff created
}

model SellerPacketOrder {
  id             Int    @id @default(autoincrement())
  sellerPacketId Int
  orderId        Int // The order or orderItem ID
  sku            String

  sellerPacket SellerPacket @relation(fields: [sellerPacketId], references: [id])
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  user      users    @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime @default(now())
}

model CartItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  size      String
  createdAt DateTime @default(now())

  customPatternLink String?
  quantity          Int     @default(1)

  user    users   @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId, size])
}
