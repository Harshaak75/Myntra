generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id            Int            @id @default(autoincrement())
  name          String?        @db.VarChar(100)
  email         String         @unique @db.VarChar(100)
  Order         Order[]
  refreshTokens refresh_token?
  userAddress   userAddress?
  userProfile   userProfile?
}

model userProfile {
  id                  Int      @id @default(autoincrement())
  userId              Int      @unique
  Gender              String
  alternateNumber     String?
  alternateNumberName String?
  dateofbirth         DateTime
  user                users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model userAddress {
  id            Int     @id @default(autoincrement())
  userId        Int     @unique
  address       String?
  city          String?
  state         String?
  pincode       String?
  Locality      String?
  typeOfAddress String? @default("home")
  user          users   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model refresh_token {
  id        Int      @id @default(autoincrement())
  token     String
  userId    Int      @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model otpTable {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  otp           String?
  expiresAt     DateTime?
  lastRequestAt DateTime?
}

model blacklist_token {
  id        Int      @id @default(autoincrement())
  token     String
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model admin_users {
  id                  Int                  @id @default(autoincrement())
  name                String
  email               String               @unique
  password            String
  role                String
  createdAt           DateTime             @default(now())
  is_active           Boolean              @default(true)
  last_login          DateTime?
  refresh_token_admin refresh_token_admin?
}

model refresh_token_admin {
  id        Int         @id @default(autoincrement())
  token     String
  adminId   Int         @unique
  createdAt DateTime    @default(now())
  expiresAt DateTime
  admin     admin_users @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model refresh_token_seller {
  id        Int      @id @default(autoincrement())
  token     String
  sellerId  Int      @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  seller    Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}

model Product {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(255)
  price            Decimal
  sellerId         Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  approved         Boolean            @default(false)
  isActive         Boolean            @default(true)
  Order            Order[]
  seller           Seller             @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  productAttribute productAttribute[]
}

model Seller {
  id                   Int                   @id @default(autoincrement())
  firstname            String                @db.VarChar(255)
  lastname             String?               @db.VarChar(255)
  email                String                @unique @db.VarChar(100)
  password             String                @db.VarChar(255)
  phone                String                @db.VarChar(15)
  gstNumber            String?               @unique @db.VarChar(20)
  panNumber            String?               @unique @db.VarChar(20)
  address1             String?
  address2             String?
  city                 String?               @db.VarChar(100)
  state                String?               @db.VarChar(100)
  pincode              String?               @db.VarChar(10)
  country              String?               @default("India")
  bankDetails          Json?
  isVerified           Boolean               @default(false)
  isActive             Boolean               @default(true)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  Order                Order[]
  products             Product[]
  SellerDocuments      SellerDocuments[]
  refresh_token_seller refresh_token_seller?
  SellerShopDetails    SellerShopDetails[]
}

model SellerShopDetails {
  id              Int     @id @default(autoincrement())
  sellerId        Int
  shopName        String  @db.VarChar(255)
  address1        String
  address2        String
  pincode         String  @db.VarChar(15)
  city            String  @db.VarChar(20)
  category        String[]
  gstnumber       String  @db.VarChar(30)
  pannumber       String  @db.VarChar(15)
  seller          Seller  @relation(fields: [sellerId], references: [id])
}

model Order {
  id         Int      @id @default(autoincrement())
  productId  Int
  sellerId   Int
  buyerId    Int
  quantity   Int
  totalPrice Decimal
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  buyer      users    @relation(fields: [buyerId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
  seller     Seller   @relation(fields: [sellerId], references: [id])
}

model SellerDocuments {
  id          Int      @id @default(autoincrement())
  sellerId    Int
  documentUrl String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  seller      Seller   @relation(fields: [sellerId], references: [id])
}

model productAttribute {
  id             Int     @id @default(autoincrement())
  productId      Int
  attributename  String
  attributevalue String
  product        Product @relation(fields: [productId], references: [id])
}
