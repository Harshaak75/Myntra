generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id            Int            @id @default(autoincrement())
  name          String?        @db.VarChar(100)
  email         String         @unique @db.VarChar(100)
  refreshTokens refresh_token?
  userAddress   userAddress?
  userProfile   userProfile?
  Order         Order[]
}

model userProfile {
  id                  Int      @id @default(autoincrement())
  userId              Int      @unique
  Gender              String
  alternateNumber     String?
  alternateNumberName String?
  dateofbirth         DateTime
  user                users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model userAddress {
  id            Int     @id @default(autoincrement())
  userId        Int     @unique
  address       String?
  city          String?
  state         String?
  pincode       String?
  Locality      String?
  typeOfAddress String? @default("home")
  user          users   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model refresh_token {
  id        Int      @id @default(autoincrement())
  token     String
  userId    Int      @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model otpTable {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  otp           String?
  expiresAt     DateTime?
  lastRequestAt DateTime?
}

model blacklist_token {
  id        Int      @id @default(autoincrement())
  token     String
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model admin_users {
  id                  Int                  @id @default(autoincrement())
  name                String
  email               String               @unique
  password            String
  role                String
  createdAt           DateTime             @default(now())
  is_active           Boolean              @default(true)
  last_login          DateTime?
  refresh_token_admin refresh_token_admin?
}

model refresh_token_admin {
  id        Int         @id @default(autoincrement())
  token     String
  adminId   Int         @unique
  createdAt DateTime    @default(now())
  expiresAt DateTime
  admin     admin_users @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model refresh_token_seller {
  id        Int      @id @default(autoincrement())
  token     String
  sellerId  Int      @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  seller    Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}

// Products model

model Product {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(255) // Product name
  description  String?  @db.Text // Optional product description
  brand        String   @db.VarChar(100) // Brand name
  category     String   @db.VarChar(100) // Product category (e.g., Men, Women, Footwear)
  subCategory  String?  @db.VarChar(100) // Sub-category (e.g., Sneakers, Formal Shoes)
  price        Decimal // Product price
  discount     Int?     @default(0) // Discount percentage (optional)
  stock        Int      @default(0) // Available stock quantity
  approved     Boolean  @default(false) // Approval status
  sizeOptions  Json? // JSON array for sizes available
  colorOptions Json? // JSON array for colors available
  material     String?  @db.VarChar(100) // Material type (e.g., Cotton, Leather)
  images       String[] // Array of image URLs
  rating       Decimal? // Average product rating
  reviewsCount Int?     @default(0) // Number of reviews
  sellerId     Int // Foreign key reference to Seller
  seller       Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) // Timestamp of product creation
  updatedAt    DateTime @updatedAt // Auto-update on modifications
  Order        Order[]
}

// Seller

model Seller {
  id                   Int                   @id @default(autoincrement())
  name                 String                @db.VarChar(255) // Seller Name or Store Name
  email                String                @unique @db.VarChar(100) // Seller's email (unique)
  password             String                @db.VarChar(255) // Hashed Password for authentication
  phone                String                @db.VarChar(15) // Contact number
  gstNumber            String?               @unique @db.VarChar(20) // GST Number (for India)
  panNumber            String?               @unique @db.VarChar(20) // PAN (optional for verification)
  address              String?               @db.Text // Business address
  city                 String?               @db.VarChar(100) // Seller’s city
  state                String?               @db.VarChar(100) // Seller’s state
  pincode              String?               @db.VarChar(10) // Postal Code / ZIP Code
  country              String?               @default("India") // Default is India, can be changed
  bankDetails          Json? // JSON object to store bank details (account number, IFSC)
  isVerified           Boolean               @default(false) // Status of verification
  isActive             Boolean               @default(true) // Whether the seller is active
  createdAt            DateTime              @default(now()) // Timestamp when seller registered
  updatedAt            DateTime              @updatedAt // Auto-update on modifications
  products             Product[] // Relation with Product Table
  refresh_token_seller refresh_token_seller?
  Order                Order[]
}

// Order Admin

model Order {
  id         Int      @id @default(autoincrement())
  productId  Int
  product    Product  @relation(fields: [productId], references: [id])
  sellerId   Int
  seller     Seller   @relation(fields: [sellerId], references: [id])
  buyerId    Int
  buyer      users    @relation(fields: [buyerId], references: [id])
  quantity   Int
  totalPrice Decimal
  status     String   @default("pending") // pending, accepted, rejected, canceled, shipped, delivered
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
