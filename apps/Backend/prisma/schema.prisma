// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id            Int             @id @default(autoincrement())
  name          String?         @db.VarChar(100)
  email         String          @unique @db.VarChar(100)
  refreshTokens refresh_token[]
  userProfile   userProfile?
  userAddress   userAddress?
}

model userProfile {
  id                  Int      @id @default(autoincrement())
  userId              Int      @unique
  user                users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Gender              String
  dateofbirth         DateTime
  alternateNumber     String? // âœ… Ensure consistent naming (camelCase)
  alternateNumberName String?
}

model userAddress {
  id            Int     @id @default(autoincrement())
  userId        Int     @unique
  user          users   @relation(fields: [userId], references: [id], onDelete: Cascade)
  address       String?
  city          String?
  state         String?
  pincode       String?
  Locality      String?
  typeOfAddress String? @default("home")
}

model refresh_token {
  id        Int      @id @default(autoincrement())
  token     String   @db.Text
  userId    Int      @unique
  user      users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model otpTable {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  otp           String?
  expiresAt     DateTime?
  lastRequestAt DateTime? // Store last OTP request timestamp
}

model blacklist_token {
  id        Int      @id @default(autoincrement())
  token     String   @db.Text
  createdAt DateTime @default(now())
  expiresAt DateTime
}

// admin models

model admin_users {
  id                  Int                  @id @default(autoincrement())
  name                String
  email               String               @unique
  password            String
  role                String
  createdAt           DateTime             @default(now())
  is_active           Boolean              @default(true)
  last_login          DateTime?
  refresh_token_admin refresh_token_admin?
}

model refresh_token_admin {
  id        Int         @id @default(autoincrement())
  token     String      @db.Text
  adminId    Int         @unique
  admin     admin_users @relation(fields: [adminId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  expiresAt DateTime
}
